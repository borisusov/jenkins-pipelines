pipeline {

    agent any
    // agent {
    //     node {
    //         label "master"
    //         customWorkspace "/var/jenkins_home/workspace/hello-world-servlet/${BRANCH_NAME}"
    //     }
    // }
    

    tools {
        maven 'mvn_3.6.3' 
    }
    
    stages {
        stage('Configure Maven'){

            steps{

                sh "env | sort"
                sh "pwd"
                sh "find . -name *.xml"
                script {
                    pom         = readMavenPom file: 'pom.xml'
                    app_version = pom.getVersion()
                    app_name    = pom.getName() 
                    echo "${app_name}-${app_version}"
                    currentBuild.description = "${app_name}-${app_version}"    
                                                                    
                }

                rtMavenResolver (
                    id: 'my-resolver',
                    serverId: 'jfrog',
                    releaseRepo: 'default.maven.virtual',
                    snapshotRepo: 'default.maven.virtual'
                 )

                rtMavenDeployer (
                    id: 'my-deployer',
                    serverId: 'jfrog',
                    releaseRepo: 'release.maven.local',
                    snapshotRepo: 'snapshot.maven.local',
                    // By default, 3 threads are used to upload the artifacts to Artifactory. You can override this default by setting:
                    // threads: 4,
                    
                 )
                                
            }
        }
        stage ("test"){
            steps{
                rtMavenRun (
                    tool: 'mvn_3.6.3',
                    pom: 'pom.xml',
                    goals: 'clean test',
                    resolverId: 'my-resolver',
                    deployerId: 'my-deployer',
                )

                  echo "Job name is ${JOB_NAME}"
                  echo "Build URL is ${BUILD_URL}"
                  echo "Build name is ${BUILD_DISPLAY_NAME}_${app_version}"
                  echo "Build version is ${app_version}"
                  echo "Name is ${app_name}"
                
            }
        }
        



        stage('Maven Build') {

            //when {
            //    expression { false }
            //}

            // TO DO cleanup before checkout  

            steps { 
                
               
                rtMavenRun (
                    // Tool name from Jenkins configuration.
                    tool: 'mvn_3.6.3',
                    pom: 'pom.xml',
                    goals: 'clean install -DskipTests',
                    // Maven options.
                    opts: '-Xms1024m -Xmx4096m',
                    resolverId: 'my-resolver',
                    deployerId: 'my-deployer',
                    
                    buildName: 'HelloWorld',
                    buildNumber: BUILD_NUMBER
                )                  
      
            }

          
        }

        
  
        stage ("git tag"){
            steps{
                withCredentials([sshUserPrivateKey(credentialsId: 'borisusov-git', keyFileVariable: 'KEY_FILE')]) {
                    
                    sh (label: "Git Tags", script: """
                        eval `ssh-agent -s`
                        ssh-add ${KEY_FILE}

                        git config --global user.email "busov@ukr.net"
                        git config --global user.name "Jenkins"

                        git tag "${BUILD_DISPLAY_NAME}" -f
                        git push --tags -f

                    """)
                }
     
            }
        }          
    }

    post {
        //always {
        //    junit 'build/reports/**/*.xml'
        //}
        cleanup {
            cleanWs ()
        }
    }
}