pipeline {
    agent any;
    

    tools {
        maven 'mvn_3.6.3' 
    }
    
    stages {
        stage('Maven Build') {

            //when {
                
            //    expression { false }
            //}
            steps { 
                sh "env | sort"
                script {
                    pom         = readMavenPom file: 'pom.xml'
                    app_version = pom.getVersion()
                    app_name    = pom.getName() 
                    echo "${app_name}-${app_version}"
                    currentBuild.description = "${app_name}-${app_version}"
            
                }
                rtMavenResolver (
                        id: 'my-resolver',
                        serverId: 'jfrog',
                        releaseRepo: 'default.maven.virtual',
                        snapshotRepo: 'default.maven.virtual'
                 )


                rtMavenDeployer (
                    id: 'my-deployer',
                    serverId: 'jfrog',
                    releaseRepo: 'release.maven.local',
                    snapshotRepo: 'snapshot.maven.local',
                    // By default, 3 threads are used to upload the artifacts to Artifactory. You can override this default by setting:
                    threads: 4,
                    // Attach custom properties to the published artifacts:
                    //properties: ['key1=value1', 'key2=value2']
                )

                rtMavenRun (
                    tool: 'mvn_3.6.3',
                    pom: 'pom.xml',
                    goals: 'clean test',
                    resolverId: 'my-resolver',
                    deployerId: 'my-deployer',
                    //  buildNumber: '99',
                                       
                    //  buildName: 'my-build'
            )

                rtMavenRun (
                    // Tool name from Jenkins configuration.
                    tool: 'mvn_3.6.3',
                    pom: 'pom.xml',
                    goals: 'clean install',
                    // Maven options.
                    opts: '-Xms1024m -Xmx4096m',
                    resolverId: 'my-resolver',
                    deployerId: 'my-deployer',
                    
                    buildName: 'HelloWorld',
                    buildNumber: BUILD_NUMBER
                )


                echo "Job name is ${JOB_NAME}"
                echo "Build URL is ${BUILD_URL}"
                echo "Build name is ${BUILD_DISPLAY_NAME}_${app_version}"
                echo "Build version is ${app_version}"
                echo "Name is ${app_name}"
         
                        



            }


          //  post {++
          //      success {
          //          archiveArtifacts artifacts: 'target/*.war', fingerprint: true
          //      }
          //  }
        }
        stage ("git tag"){
            steps{
                withCredentials([sshUserPrivateKey(credentialsId: 'borisusov-git', keyFileVariable: 'KEY_FILE')]) {
                    
                    sh (label: "Git Tags", script: """
                        eval `ssh-agent -s`
                        ssh-add ${KEY_FILE}

                        git config --global user.email "busov@ukr.net"
                        git config --global user.name "Jenkins"


                        git tag new_version -m 'a1'
                        git push --tags -f

                    """)
                }
                
            }
        }
        
        
    }

    post {
        cleanup {
            cleanWs ()
        }
    }
}